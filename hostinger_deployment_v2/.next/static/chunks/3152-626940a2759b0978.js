"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3152],{3152:function(e,t,r){r.d(t,{al:function(){return w},D:function(){return g},wG:function(){return h},B4:function(){return u},wf:function(){return b},_I:function(){return _},OV:function(){return p},KH:function(){return y},z6:function(){return f},userService:function(){return m}});var o=r(8411),a=r(2601);class i{getCredentials(){try{let e=a.env.NEXT_PUBLIC_GOOGLE_SERVICE_ACCOUNT_JSON;if(e)return JSON.parse(e);let t=a.env.NEXT_PUBLIC_GOOGLE_PRIVATE_KEY,r=a.env.NEXT_PUBLIC_GOOGLE_CLIENT_EMAIL,o=a.env.NEXT_PUBLIC_GOOGLE_PROJECT_ID;if(t&&r&&o)return{type:"service_account",project_id:o,private_key_id:"",private_key:t.replace(/\\n/g,"\n"),client_email:r,client_id:"",auth_uri:"https://accounts.google.com/o/oauth2/auth",token_uri:"https://oauth2.googleapis.com/token",auth_provider_x509_cert_url:"https://www.googleapis.com/oauth2/v1/certs",client_x509_cert_url:"https://www.googleapis.com/robot/v1/metadata/x509/".concat(encodeURIComponent(r))};return null}catch(e){return console.error("Error parsing service account credentials:",e),null}}async getAccessToken(){if(this.accessToken&&Date.now()<this.tokenExpiry)return this.accessToken;let e=this.getCredentials();if(!e)throw Error("Service account credentials not configured. Please set up Google Service Account.");try{Date.now(),e.client_email;let t=await fetch("/api/google-drive-proxy",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"getAccessToken",credentials:e})});if(!t.ok)throw Error("Failed to get access token: ".concat(t.statusText));let r=await t.json();return this.accessToken=r.access_token,this.tokenExpiry=Date.now()+1e3*r.expires_in-6e4,this.accessToken||""}catch(e){throw console.error("Error getting service account access token:",e),e}}async listFiles(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"root";try{let t=await fetch("/api/google-drive-proxy",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"listFiles",folderId:e})});if(!t.ok)throw Error("Failed to list files: ".concat(t.statusText));let r=await t.json();return r.files||[]}catch(e){throw console.error("Error listing files:",e),e}}async searchFiles(e){try{let t=await fetch("/api/google-drive-proxy",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"searchFiles",query:e})});if(!t.ok)throw Error("Failed to search files: ".concat(t.statusText));let r=await t.json();return r.files||[]}catch(e){throw console.error("Error searching files:",e),e}}async uploadFile(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"root";try{let r=await new Promise((t,r)=>{let o=new FileReader;o.onload=()=>{let e=o.result,r=e.split(",")[1];t(r)},o.onerror=r,o.readAsDataURL(e)}),o=await fetch("/api/google-drive-proxy",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"uploadFile",fileName:e.name,fileData:r,mimeType:e.type,parentId:t})});if(!o.ok)throw Error("Failed to upload file: ".concat(o.statusText));let a=await o.json();return a}catch(e){throw console.error("Error uploading file:",e),e}}async createFolder(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"root";try{let r=await fetch("/api/google-drive-proxy",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"createFolder",name:e,parentId:t})});if(!r.ok)throw Error("Failed to create folder: ".concat(r.statusText));let o=await r.json();return o}catch(e){throw console.error("Error creating folder:",e),e}}async listSharedDrives(){try{let e=await fetch("/api/google-drive-proxy",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"listSharedDrives"})});if(!e.ok)throw Error("Failed to list shared drives: ".concat(e.statusText));let t=await e.json();return t.drives||[]}catch(e){throw console.error("Error listing shared drives:",e),e}}isConfigured(){let e=this.getCredentials();return null!==e}getSetupInstructions(){return"\nTo set up Google Drive Service Account access:\n\n1. Go to Google Cloud Console (https://console.cloud.google.com/)\n2. Create a new project or select existing one\n3. Enable Google Drive API\n4. Create a Service Account:\n   - Go to IAM & Admin > Service Accounts\n   - Create Service Account\n   - Download the JSON key file\n5. Share your Google Drive folders with the service account email\n6. Configure environment variables:\n   - NEXT_PUBLIC_GOOGLE_SERVICE_ACCOUNT_JSON=[full JSON content]\n   OR\n   - NEXT_PUBLIC_GOOGLE_CLIENT_EMAIL=[service account email]\n   - NEXT_PUBLIC_GOOGLE_PRIVATE_KEY=[private key]\n   - NEXT_PUBLIC_GOOGLE_PROJECT_ID=[project ID]\n\nThis allows everyone to access Google Drive without individual authentication.\n    ".trim()}constructor(){this.accessToken=null,this.tokenExpiry=0}}let s=new i;var n=r(8938);let c=e=>e&&"object"==typeof e?{...e,tags_list:e.tags?e.tags.split(",").map(e=>e.trim()).filter(Boolean):[]}:{id:0,name:"Unknown Task",description:"",tags_list:[]},l=e=>e&&Array.isArray(e)?e.map(c):[],d=async()=>{try{let{user:e,error:t}=await o.supabaseAuth.getUser();if(t)return console.error("Authentication error:",t),null;return(null==e?void 0:e.id)||null}catch(e){return console.error("Failed to get current user ID:",e),null}},u={async getProjects(){try{let e=await d();if(!e)return console.log("No user ID found, returning empty array"),[];let{data:t,error:r}=await o.supabaseDb.getProjects(e);if(r)throw r;return Array.isArray(t)?t:[]}catch(e){return console.error("Error in getProjects:",e),[]}},async getProject(e){try{let t=await d();if(!t)throw Error("Authentication required");let{data:r,error:a}=await o.supabaseDb.getProject(e,t);if(a)throw a;return r}catch(e){throw console.error("Error in getProject:",e),e}},async createProject(e){let{data:t,error:r}=await o.supabaseDb.createProject(e);if(r)throw r;return t},async updateProject(e,t){let{data:r,error:a}=await o.supabaseDb.updateProject(e,t);if(a)throw a;return r},async deleteProject(e){let{data:t,error:r}=await o.supabaseDb.deleteProject(e);if(r)throw r;return t},async getUsers(){try{let{data:e,error:t}=await o.supabaseDb.getUsers();if(t)throw t;return Array.isArray(e)?e:[]}catch(e){return console.error("Error in getUsers:",e),[]}},getUserProjects:async()=>await u.getProjects(),getProjectMembers:async e=>{try{let t=await d();if(!t)return[];let{data:r,error:a}=await o.supabaseDb.getProject(e,t);if(a)return[];return Array.isArray(null==r?void 0:r.members)?r.members:[]}catch(e){return console.error("Error in getProjectMembers:",e),[]}},addProjectMember:async(e,t)=>{try{let r=await d();if(!r)throw Error("Authentication required");await o.supabaseDb.getProject(e,r);let{data:a,error:i}=await o.supabaseDb.addProjectMember(e,t);if(i)throw i;return a}catch(e){throw console.error("Error in addProjectMember:",e),Error("Failed to add project member: ".concat(String(e)))}},removeProjectMember:async(e,t)=>{try{let r=await d();if(!r)throw Error("Authentication required");await o.supabaseDb.getProject(e,r);let{data:a,error:i}=await o.supabaseDb.removeProjectMember(e,t);if(i)throw i;return a}catch(e){throw console.error("Error in removeProjectMember:",e),Error("Failed to remove project member: ".concat(String(e)))}}},p={async getTasks(e){try{if(e){let t=await d();if(!t)return[];await o.supabaseDb.getProject(e,t)}let{data:t,error:r}=await o.supabaseDb.getTasks(e);if(r)throw r;return l(t||[])}catch(e){return console.error("Error in getTasks:",e),[]}},async getProjectTasks(e){try{let t=await d();if(!t)return[];await o.supabaseDb.getProject(e,t);let{data:r,error:a}=await o.supabaseDb.getTasks(e);if(a)throw a;return l(r||[])}catch(e){return console.error("Error in getProjectTasks:",e),[]}},async getUserTasks(){try{let e=await d();if(!e)return[];let{data:t,error:r}=await o.supabaseDb.getUserTasks(e);if(r)throw r;return l(t||[])}catch(e){return console.error("Error in getUserTasks:",e),[]}},async createTask(e,t){let r=await d();if(!r)throw Error("Authentication required");await o.supabaseDb.getProject(e,r);let{data:a,error:i}=await o.supabaseDb.createTask({...t,project_id:e});if(i)throw i;return c(a)},async updateTask(e,t){let r={...t};"assignee_id"in r&&(console.warn("Filtering out deprecated assignee_id field from task update data"),delete r.assignee_id);let{data:a,error:i}=await o.supabaseDb.updateTask(e,r);if(i)throw i;return c(a)},async updateTaskStatus(e,t){let{data:r,error:a}=await o.supabaseDb.updateTask(e,{status:t});if(a)throw a;return c(r)},async deleteTask(e){try{let{data:t,error:r}=await o.supabaseDb.deleteTask(e);if(r){console.error("Error in deleteTask:",r);let e=String(r);if(e.includes("not found"))throw Error("Task not found or already deleted");if(e.includes("Permission denied"))throw Error("You do not have permission to delete this task");if(e.includes("Authentication required"))throw Error("Please log in to delete tasks");throw Error("Failed to delete task: ".concat(e))}return t}catch(e){throw console.error("Exception in taskService.deleteTask:",e),e}},async getTaskComments(e){try{let{data:t,error:r}=await o.supabaseDb.getTaskComments(e);if(r)throw r;return t||[]}catch(e){return console.error("Error in getTaskComments:",e),[]}},async createTaskComment(e,t){try{let{data:r,error:a}=await o.supabaseDb.createTaskComment(e,t);if(a)throw a;return r}catch(e){throw console.error("Error in createTaskComment:",e),e}},getTaskAttachments:async e=>[],async uploadTaskAttachment(e,t){try{var r,a,i,s,n;let e=await d(),c=await o.supabaseAuth.getUser();return{id:Date.now(),file:t.name,filename:t.name,user:{id:e||1,name:(null===(a=c.user)||void 0===a?void 0:null===(r=a.user_metadata)||void 0===r?void 0:r.name)||"Current User",email:(null===(i=c.user)||void 0===i?void 0:i.email)||"user@example.com",role:(null===(n=c.user)||void 0===n?void 0:null===(s=n.user_metadata)||void 0===s?void 0:s.role)||"member"},created_at:new Date().toISOString(),file_size:t.size}}catch(e){throw console.error("Error in uploadTaskAttachment:",e),e}}},h={async getMeetings(){try{let{data:e,error:t}=await o.supabaseDb.getMeetings();if(t)throw t;return Array.isArray(e)?e:[]}catch(e){return console.error("Error in getMeetings:",e),[]}},async getMeeting(e){try{let{data:t,error:r}=await o.supabaseDb.getMeetings();if(r)throw Error(String(r)||"Failed to fetch meetings");let a=Array.isArray(t)?t.find(t=>t.id===e):null;if(!a)throw Error("Meeting not found");return a}catch(e){throw console.error("Error in getMeeting:",e),e}},async createMeeting(e){let{data:t,error:r}=await o.supabaseDb.createMeeting(e);if(r)throw r;return t},async updateMeeting(e,t){let{data:r,error:a}=await o.supabaseDb.updateMeeting(e,t);if(a)throw a;return r},async deleteMeeting(e){let{data:t,error:r}=await o.supabaseDb.deleteMeeting(e);if(r)throw r;return t},getProjectMeetings:async e=>{try{let{data:t,error:r}=await o.supabaseDb.getMeetings();if(r)throw Error(String(r)||"Failed to fetch meetings");return Array.isArray(t)?t.filter(t=>t.project_id===e):[]}catch(e){return console.error("Error in getProjectMeetings:",e),[]}}},m={getUsers:async()=>{let{data:e,error:t}=await o.supabaseDb.getUsers();if(t)throw Error(String(t)||"Failed to fetch users");return e||[]}};async function g(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;try{let t=await s.listFiles(e||"root");return n.NY.filterAccessibleFiles(t)}catch(e){throw console.error("Error listing drive files:",e),e}}async function _(e){try{let t=await s.searchFiles(e);return n.NY.filterAccessibleFiles(t)}catch(e){throw console.error("Error searching drive files:",e),e}}async function f(e,t,r){try{let o=[];for(let a=0;a<e.length;a++){let i=e[a];r&&r(a,e.length,i.name);let n=await s.uploadFile(i,t);o.push(n)}return r&&r(e.length,e.length,"Complete"),o}catch(e){throw console.error("Error uploading multiple files to drive:",e),e}}async function w(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;try{return await s.createFolder(e,t||"root")}catch(e){throw console.error("Error creating drive folder:",e),e}}let y={async getTodos(e){try{let t=await d();if(!t)return[];await o.supabaseDb.getProject(e,t);let{data:r,error:a}=await o.supabase.from("todo_items").select("*").eq("project_id",e).order("created_at",{ascending:!1});if(a)throw a;return(r||[]).map(e=>({id:e.id,title:e.title,description:e.description,completed:e.completed,due_date:e.due_date,created_at:e.created_at,updated_at:e.updated_at,project_id:e.project_id,created_by:{id:e.created_by,name:"User",email:"user@example.com"}}))}catch(e){return console.error("Error in getTodos:",e),[]}},async createTodo(e,t){try{let r=await d();if(!r)throw Error("Authentication required");await o.supabaseDb.getProject(e,r);let{data:a,error:i}=await o.supabase.from("todo_items").insert([{project_id:e,title:t.title,description:t.description||null,due_date:t.due_date||null,created_by:r,completed:!1}]).select().single();if(i)throw i;return{id:a.id,title:a.title,description:a.description,completed:a.completed,due_date:a.due_date,created_at:a.created_at,updated_at:a.updated_at,project_id:a.project_id,created_by:{id:r,name:"Current User",email:"user@example.com"}}}catch(e){throw console.error("Error in createTodo:",e),e}},async updateTodo(e,t){try{let r=await d();if(!r)throw Error("Authentication required");let{data:a,error:i}=await o.supabase.from("todo_items").update({title:t.title,description:t.description||null,due_date:t.due_date||null,completed:t.completed,updated_at:new Date().toISOString()}).eq("id",e).eq("created_by",r).select().single();if(i)throw i;return{id:a.id,title:a.title,description:a.description,completed:a.completed,due_date:a.due_date,created_at:a.created_at,updated_at:a.updated_at,project_id:a.project_id,created_by:{id:r,name:"Current User",email:"user@example.com"}}}catch(e){throw console.error("Error in updateTodo:",e),e}},async deleteTodo(e){try{let t=await d();if(!t)throw Error("Authentication required");let{data:r,error:a}=await o.supabase.from("todo_items").select("id, created_by").eq("id",e).single();if(a){if("PGRST116"===a.code)throw Error("Todo item not found or already deleted");throw Error("Failed to find todo: ".concat(a.message))}if(r.created_by!==t)throw Error("You can only delete your own todo items");let{error:i}=await o.supabase.from("todo_items").delete().eq("id",e).eq("created_by",t);if(i)throw console.error("Delete error:",i),Error("Failed to delete todo: ".concat(i.message));return{success:!0}}catch(e){throw console.error("Error in deleteTodo:",e),e}},async toggleTodoComplete(e,t){try{let r=await d();if(!r)throw Error("Authentication required");let{data:a,error:i}=await o.supabase.from("todo_items").update({completed:t,updated_at:new Date().toISOString()}).eq("id",e).eq("created_by",r).select().single();if(i)throw i;return{id:a.id,title:a.title,description:a.description,completed:a.completed,due_date:a.due_date,created_at:a.created_at,updated_at:a.updated_at,project_id:a.project_id,created_by:{id:r,name:"Current User",email:"user@example.com"}}}catch(e){throw console.error("Error in toggleTodoComplete:",e),e}}},b={getTeamKpiReport:async()=>{try{let e=await d();if(!e)return console.log("No authentication found, returning empty report"),{summary:{total_team_members:0,average_completion_rate:0,total_tasks_across_team:0,total_finished_tasks:0,total_projects:0,active_projects:0,completed_projects:0,overdue_tasks:0},team_report:[]};console.log("Fetching team KPI report for user:",e);let{data:t,error:r}=await o.supabaseDb.getProjects(e);if(r)throw console.error("Projects error:",r),r;let a=t||[],i=a.map(e=>e.id);if(0===i.length)return console.log("User has no accessible projects"),{summary:{total_team_members:0,average_completion_rate:0,total_tasks_across_team:0,total_finished_tasks:0,total_projects:0,active_projects:0,completed_projects:0,overdue_tasks:0},team_report:[]};let{data:s,error:n}=await o.supabaseDb.getTasks();if(n)throw console.error("Tasks error:",n),n;let c=(s||[]).filter(e=>i.includes(e.project_id)),l=new Set;a.forEach(e=>{e.members&&e.members.forEach(e=>l.add(e.id))});let{data:u,error:p}=await o.supabaseDb.getUsers();if(p)throw console.error("Users error:",p),p;let h=(u||[]).filter(e=>l.has(e.id)),m=a.length,g=a.filter(e=>!e.is_archived).length,_=a.filter(e=>"completed"===e.status).length,f=c.length,w=c.filter(e=>"done"===e.status||"completed"===e.status).length;c.filter(e=>"in-progress"===e.status||"in_progress"===e.status).length;let y=c.filter(e=>{if(!e.due_date)return!1;let t=new Date(e.due_date),r=new Date;return t<r&&"done"!==e.status&&"completed"!==e.status}).length,b=h.map(e=>{var t;let r=c.filter(t=>t.assignee_ids&&Array.isArray(t.assignee_ids)?t.assignee_ids.includes(e.id):t.created_by===e.id||t.created_by_id===e.id),o=r.filter(e=>"done"===e.status||"completed"===e.status).length,a=r.filter(e=>"done"!==e.status&&"completed"!==e.status).length,s=r.filter(e=>{if(!e.due_date)return!1;let t=new Date(e.due_date),r=new Date;return t<r&&"done"!==e.status&&"completed"!==e.status}).length,n=new Set;r.forEach(e=>{e.project_id&&i.includes(e.project_id)&&n.add(e.project_id)});let l=r.length>0?Math.round(o/r.length*100):0;return{user_id:e.id,user_name:e.name||(null===(t=e.email)||void 0===t?void 0:t.split("@")[0])||"Unknown User",user_email:e.email,user_role:e.role||"member",user_position:e.position||e.role||"Team Member",finished_tasks:o,unfinished_tasks:a,overdue_tasks:s,active_projects:n.size,completion_rate:l,total_tasks:r.length}}),v=b.length>0?Math.round(b.reduce((e,t)=>e+t.completion_rate,0)/b.length):0,E={summary:{total_team_members:h.length,average_completion_rate:v,total_tasks_across_team:f,total_finished_tasks:w,total_projects:m,active_projects:g,completed_projects:_,overdue_tasks:y},team_report:b};return console.log("Successfully generated project-filtered team KPI report:",E),E}catch(e){return console.error("Error in getTeamKpiReport:",e),{summary:{total_team_members:0,average_completion_rate:0,total_tasks_across_team:0,total_finished_tasks:0,total_projects:0,active_projects:0,completed_projects:0,overdue_tasks:0},team_report:[]}}},getMemberDetailedReport:async e=>{try{var t;console.log("Fetching member detailed report for user:",e);let r=await d();if(!r)throw Error("Authentication required to view member details");let{data:a,error:i}=await o.supabaseDb.getProjects(r);if(i)throw i;let s=a||[],n=s.map(e=>e.id);if(0===n.length)throw Error("You have no accessible projects to view team member details");let c=s.some(t=>t.members&&t.members.some(t=>t.id===e));if(!c)throw Error("You can only view details for team members in your shared projects");let{data:l,error:u}=await o.supabaseDb.getUsers();if(u)throw u;let p=(l||[]).find(t=>t.id===e);if(!p)throw Error("User not found");let{data:h,error:m}=await o.supabaseDb.getTasks();if(m)throw m;let g=(h||[]).filter(e=>n.includes(e.project_id)),_=g.filter(t=>t.assignee_ids&&Array.isArray(t.assignee_ids)?t.assignee_ids.includes(e):t.created_by===e||t.created_by_id===e),f=_.filter(e=>{if(!e.due_date)return!1;let t=new Date(e.due_date),r=new Date;return t<r&&"done"!==e.status&&"completed"!==e.status}),w=s.filter(e=>_.some(t=>t.project_id===e.id));return{user_info:{id:p.id,name:p.name||(null===(t=p.email)||void 0===t?void 0:t.split("@")[0])||"Unknown User",email:p.email,role:p.role||"member",position:p.position||p.role||"Team Member"},task_summary:{total_tasks:_.length,completed_tasks:_.filter(e=>"done"===e.status||"completed"===e.status).length,in_progress_tasks:_.filter(e=>"in-progress"===e.status||"in_progress"===e.status).length,todo_tasks:_.filter(e=>"todo"===e.status||"pending"===e.status).length,overdue_tasks:f.length},overdue_task_details:f.map(e=>{var t;return{id:e.id,name:e.name,project_name:(null===(t=s.find(t=>t.id===e.project_id))||void 0===t?void 0:t.name)||"Unknown Project",due_date:e.due_date,priority:e.priority||"medium",days_overdue:Math.ceil((new Date().getTime()-new Date(e.due_date).getTime())/864e5)}}),project_involvement:w.map(e=>({id:e.id,name:e.name,task_count:_.filter(t=>t.project_id===e.id).length,completed_in_project:_.filter(t=>t.project_id===e.id&&("done"===t.status||"completed"===t.status)).length}))}}catch(e){throw console.error("Error in getMemberDetailedReport:",e),e}},getTeamPerformanceAnalytics:async()=>{try{return{performance_trend:[],productivity_metrics:{},team_workload:[]}}catch(e){return console.error("Error in getTeamPerformanceAnalytics:",e),{performance_trend:[],productivity_metrics:{},team_workload:[]}}}}},8938:function(e,t,r){r.d(t,{NY:function(){return i}});let o={allowedFolderIds:[],allowedFolderNames:[],allowRootAccess:!0,defaultFolderId:void 0};class a{canAccessFolder(e,t){return 0===this.config.allowedFolderIds.length&&0===this.config.allowedFolderNames.length||("root"===e||null===e?this.config.allowRootAccess:!!(this.config.allowedFolderIds.includes(e)||t&&this.config.allowedFolderNames.includes(t)))}filterAccessibleFiles(e){return e.filter(e=>"application/vnd.google-apps.folder"!==e.mimeType||this.canAccessFolder(e.id,e.name))}getAccessibleFolderId(e){return e||this.config.allowRootAccess||!this.config.defaultFolderId?e:this.config.defaultFolderId}getAccessDeniedMessage(e){return"root"===e?"Access to root folder is restricted. Please use the designated project folders.":"Access to this folder is restricted. Please contact your project administrator."}updateConfig(e){this.config={...this.config,...e}}getConfig(){return{...this.config}}constructor(e){this.config={...o,...e}}}let i=new a}}]);