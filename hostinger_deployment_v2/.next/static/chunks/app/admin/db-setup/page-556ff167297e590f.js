(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4310],{565:function(e,t,s){Promise.resolve().then(s.bind(s,3621))},3621:function(e,t,s){"use strict";s.r(t),s.d(t,{default:function(){return r}});var n=s(7437),a=s(2265),i=s(8411);function r(){let[e,t]=(0,a.useState)(""),[s,r]=(0,a.useState)(!1),[d,o]=(0,a.useState)([]),[l,c]=(0,a.useState)(!1),[E,T]=(0,a.useState)(""),m=async()=>{r(!0),t("Creating meeting_notes table...");try{let{error:e}=await i.supabase.rpc("sql",{query:"\n          CREATE TABLE IF NOT EXISTS meeting_notes (\n              id BIGSERIAL PRIMARY KEY,\n              meeting_id BIGINT NOT NULL REFERENCES meetings(id) ON DELETE CASCADE,\n              title TEXT NOT NULL,\n              date DATE NOT NULL,\n              time TIME NOT NULL,\n              attendees TEXT[] DEFAULT '{}',\n              discussion_points TEXT[] DEFAULT '{}',\n              decisions_made TEXT[] DEFAULT '{}',\n              action_items TEXT[] DEFAULT '{}',\n              next_steps TEXT[] DEFAULT '{}',\n              follow_up_date DATE,\n              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n              updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n          );\n        "});if(e){console.error("Error creating table:",e);let{error:s}=await i.supabase.from("meeting_notes").select("id").limit(1);if(s&&"42P01"===s.code){t("❌ Table creation failed. Please create the table manually in Supabase dashboard."),r(!1);return}if(!s){t("✅ Table already exists!"),r(!1);return}}for(let e of(await i.supabase.rpc("sql",{query:"\n          CREATE INDEX IF NOT EXISTS idx_meeting_notes_meeting_id ON meeting_notes(meeting_id);\n          CREATE UNIQUE INDEX IF NOT EXISTS idx_meeting_notes_unique_meeting \n          ON meeting_notes(meeting_id);\n        "}),await i.supabase.rpc("sql",{query:"ALTER TABLE meeting_notes ENABLE ROW LEVEL SECURITY;"}),['\n        CREATE POLICY "Users can view meeting notes for accessible meetings" ON meeting_notes\n        FOR SELECT USING (\n            meeting_id IN (\n                SELECT m.id \n                FROM meetings m\n                JOIN projects p ON p.id = m.project\n                WHERE p.created_by = auth.uid()\n                OR p.id IN (\n                    SELECT project_id \n                    FROM tasks \n                    WHERE assignee = auth.uid() OR created_by = auth.uid()\n                )\n            )\n        );\n        ','\n        CREATE POLICY "Users can create meeting notes for accessible meetings" ON meeting_notes\n        FOR INSERT WITH CHECK (\n            meeting_id IN (\n                SELECT m.id \n                FROM meetings m\n                JOIN projects p ON p.id = m.project\n                WHERE p.created_by = auth.uid()\n                OR p.id IN (\n                    SELECT project_id \n                    FROM tasks \n                    WHERE assignee = auth.uid() OR created_by = auth.uid()\n                )\n            )\n        );\n        ','\n        CREATE POLICY "Users can update meeting notes for accessible meetings" ON meeting_notes\n        FOR UPDATE USING (\n            meeting_id IN (\n                SELECT m.id \n                FROM meetings m\n                JOIN projects p ON p.id = m.project\n                WHERE p.created_by = auth.uid()\n                OR p.id IN (\n                    SELECT project_id \n                    FROM tasks \n                    WHERE assignee = auth.uid() OR created_by = auth.uid()\n                )\n            )\n        );\n        ','\n        CREATE POLICY "Users can delete meeting notes for accessible meetings" ON meeting_notes\n        FOR DELETE USING (\n            meeting_id IN (\n                SELECT m.id \n                FROM meetings m\n                JOIN projects p ON p.id = m.project\n                WHERE p.created_by = auth.uid()\n                OR p.id IN (\n                    SELECT project_id \n                    FROM tasks \n                    WHERE assignee = auth.uid() OR created_by = auth.uid()\n                )\n            )\n        );\n        ']))await i.supabase.rpc("sql",{query:e});t("✅ Meeting notes table created successfully with all policies!")}catch(e){console.error("Setup error:",e),t("❌ Error: ".concat(e instanceof Error?e.message:"Unknown error"))}r(!1)},p=async()=>{c(!0),T("");try{let{data:e,error:t}=await i.supabase.rpc("list_public_tables");if(t)throw t;o(e||[])}catch(e){console.error("Fetch tables error:",e),o([]),T("Could not fetch tables. Please run add_list_public_tables_function.sql in Supabase SQL editor.")}finally{c(!1)}},N=async()=>{r(!0),t("Creating todo_items table...");try{let{error:e}=await i.supabase.rpc("sql",{query:"\n          CREATE TABLE IF NOT EXISTS todo_items (\n              id SERIAL PRIMARY KEY,\n              project_id INTEGER NOT NULL REFERENCES projects_project(id) ON DELETE CASCADE,\n              title TEXT NOT NULL,\n              description TEXT,\n              completed BOOLEAN DEFAULT FALSE,\n              due_date DATE,\n              created_by INTEGER NOT NULL,\n              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n              updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n          );\n        "});if(e){console.error("Error creating todo table:",e);let{error:s}=await i.supabase.from("todo_items").select("id").limit(1);if(s&&"42P01"===s.code){t("❌ Todo table creation failed. Please create the table manually in Supabase dashboard."),r(!1);return}if(!s){t("✅ Todo table already exists!"),r(!1);return}}for(let e of(await i.supabase.rpc("sql",{query:"\n          CREATE INDEX IF NOT EXISTS idx_todo_items_project_id ON todo_items(project_id);\n          CREATE INDEX IF NOT EXISTS idx_todo_items_created_by ON todo_items(created_by);\n          CREATE INDEX IF NOT EXISTS idx_todo_items_due_date ON todo_items(due_date);\n          CREATE INDEX IF NOT EXISTS idx_todo_items_completed ON todo_items(completed);\n        "}),await i.supabase.rpc("sql",{query:"ALTER TABLE todo_items ENABLE ROW LEVEL SECURITY;"}),['\n        CREATE POLICY "Users can view todos for accessible projects" ON todo_items\n        FOR SELECT USING (\n            project_id IN (\n                SELECT DISTINCT p.id \n                FROM projects_project p\n                LEFT JOIN projects_project_members pm ON p.id = pm.project_id\n                WHERE p.created_by_id = auth.uid()::INTEGER \n                   OR pm.user_id = auth.uid()::INTEGER\n            )\n        );\n        ','\n        CREATE POLICY "Users can create todos for accessible projects" ON todo_items\n        FOR INSERT WITH CHECK (\n            created_by = auth.uid()::INTEGER AND\n            project_id IN (\n                SELECT DISTINCT p.id \n                FROM projects_project p\n                LEFT JOIN projects_project_members pm ON p.id = pm.project_id\n                WHERE p.created_by_id = auth.uid()::INTEGER \n                   OR pm.user_id = auth.uid()::INTEGER\n            )\n        );\n        ','\n        CREATE POLICY "Users can update their own todos" ON todo_items\n        FOR UPDATE USING (created_by = auth.uid()::INTEGER);\n        ','\n        CREATE POLICY "Users can delete their own todos" ON todo_items\n        FOR DELETE USING (created_by = auth.uid()::INTEGER);\n        ']))await i.supabase.rpc("sql",{query:e});t("✅ Todo items table created successfully with all policies!")}catch(e){console.error("Todo setup error:",e),t("❌ Error: ".concat(e instanceof Error?e.message:"Unknown error"))}r(!1)},u=async()=>{r(!0),t("Testing database connection...");try{let{data:e,error:s}=await i.supabase.from("meeting_notes").select("count(*)").limit(1);s?"42P01"===s.code?t('⚠️ Table does not exist. Click "Create Table" to set it up.'):t("❌ Connection error: ".concat(s.message)):t("✅ Connection successful! Table exists and is accessible.")}catch(e){t("❌ Test failed: ".concat(e instanceof Error?e.message:"Unknown error"))}r(!1)},b=async()=>{r(!0),t("Testing todo_items table connection...");try{let{data:e,error:s}=await i.supabase.from("todo_items").select("count(*)").limit(1);s?"42P01"===s.code?t('⚠️ Todo table does not exist. Click "Create Todo Table" to set it up.'):t("❌ Todo table error: ".concat(s.message)):t("✅ Todo table connection successful! Table exists and is accessible.")}catch(e){t("❌ Todo test failed: ".concat(e instanceof Error?e.message:"Unknown error"))}r(!1)};return(0,n.jsx)("div",{className:"min-h-screen bg-gray-50 py-8",children:(0,n.jsx)("div",{className:"max-w-4xl mx-auto px-4",children:(0,n.jsxs)("div",{className:"bg-white shadow-lg rounded-lg overflow-hidden",children:[(0,n.jsxs)("div",{className:"bg-gray-800 text-white p-6",children:[(0,n.jsx)("h1",{className:"text-2xl font-bold",children:"Database Setup"}),(0,n.jsx)("p",{className:"text-gray-300 mt-2",children:"Set up and test database tables for the project management system"})]}),(0,n.jsx)("div",{className:"p-6",children:(0,n.jsxs)("div",{className:"space-y-6",children:[(0,n.jsxs)("div",{className:"border border-gray-200 rounded-lg p-4",children:[(0,n.jsx)("h2",{className:"text-lg font-semibold text-gray-900 mb-4",children:"Supabase Tables"}),(0,n.jsx)("div",{className:"flex flex-wrap gap-4 mb-4",children:(0,n.jsx)("button",{onClick:p,disabled:l,className:"px-4 py-2 bg-slate-700 text-white rounded-lg hover:bg-slate-800 disabled:opacity-50 disabled:cursor-not-allowed",children:l?"Fetching...":"Fetch Tables"})}),E&&(0,n.jsx)("div",{className:"p-3 rounded bg-red-50 text-red-700 text-sm border border-red-200 mb-3",children:E}),d.length>0&&(0,n.jsx)("div",{className:"overflow-x-auto",children:(0,n.jsxs)("table",{className:"min-w-full divide-y divide-gray-200",children:[(0,n.jsx)("thead",{className:"bg-gray-50",children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{className:"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",children:"Table"}),(0,n.jsx)("th",{className:"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",children:"Schema"}),(0,n.jsx)("th",{className:"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",children:"Type"})]})}),(0,n.jsx)("tbody",{className:"bg-white divide-y divide-gray-200",children:d.map(e=>(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{className:"px-4 py-2 text-sm text-gray-900",children:e.table_name}),(0,n.jsx)("td",{className:"px-4 py-2 text-sm text-gray-500",children:e.table_schema}),(0,n.jsx)("td",{className:"px-4 py-2 text-sm text-gray-500",children:e.table_type})]},"".concat(e.table_schema,".").concat(e.table_name)))})]})})]}),(0,n.jsxs)("div",{className:"border border-gray-200 rounded-lg p-4",children:[(0,n.jsx)("h2",{className:"text-lg font-semibold text-gray-900 mb-4",children:"Meeting Notes Table"}),(0,n.jsxs)("div",{className:"flex flex-wrap gap-4 mb-4",children:[(0,n.jsx)("button",{onClick:m,disabled:s,className:"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed",children:s?"Creating...":"Create Meeting Notes Table"}),(0,n.jsx)("button",{onClick:u,disabled:s,className:"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed",children:s?"Testing...":"Test Connection"})]})]}),(0,n.jsxs)("div",{className:"border border-gray-200 rounded-lg p-4",children:[(0,n.jsx)("h2",{className:"text-lg font-semibold text-gray-900 mb-4",children:"Todo Items Table"}),(0,n.jsxs)("div",{className:"flex flex-wrap gap-4 mb-4",children:[(0,n.jsx)("button",{onClick:N,disabled:s,className:"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed",children:s?"Creating...":"Create Todo Items Table"}),(0,n.jsx)("button",{onClick:b,disabled:s,className:"px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed",children:s?"Testing...":"Test Todo Table"})]})]}),e&&(0,n.jsx)("div",{className:"p-4 rounded-lg ".concat(e.includes("✅")?"bg-green-50 border border-green-200":e.includes("❌")?"bg-red-50 border border-red-200":e.includes("⚠️")?"bg-yellow-50 border border-yellow-200":"bg-blue-50 border border-blue-200"),children:(0,n.jsx)("p",{className:"font-medium ".concat(e.includes("✅")?"text-green-800":e.includes("❌")?"text-red-800":e.includes("⚠️")?"text-yellow-800":"text-blue-800"),children:e})}),(0,n.jsxs)("div",{className:"bg-yellow-50 border border-yellow-200 rounded-lg p-4",children:[(0,n.jsx)("h3",{className:"text-lg font-semibold text-yellow-900 mb-2",children:"Manual Setup Instructions"}),(0,n.jsx)("p",{className:"text-yellow-700 mb-2",children:"If automatic setup doesn't work, you can manually create tables in Supabase:"}),(0,n.jsxs)("ol",{className:"list-decimal list-inside text-yellow-700 text-sm space-y-1",children:[(0,n.jsx)("li",{children:"Go to your Supabase dashboard"}),(0,n.jsx)("li",{children:"Navigate to SQL Editor"}),(0,n.jsx)("li",{children:"Run the SQL commands below"}),(0,n.jsx)("li",{children:"Refresh this page and test the connection"})]})]}),(0,n.jsxs)("div",{className:"bg-gray-50 border border-gray-200 rounded-lg p-4",children:[(0,n.jsx)("h3",{className:"text-lg font-semibold text-gray-900 mb-2",children:"Meeting Notes SQL Commands"}),(0,n.jsx)("pre",{className:"text-xs bg-white p-3 rounded border overflow-x-auto",children:"-- Create meeting_notes table\nCREATE TABLE IF NOT EXISTS meeting_notes (\n    id BIGSERIAL PRIMARY KEY,\n    meeting_id BIGINT NOT NULL REFERENCES meetings(id) ON DELETE CASCADE,\n    title TEXT NOT NULL,\n    date DATE NOT NULL,\n    time TIME NOT NULL,\n    attendees TEXT[] DEFAULT '{}',\n    discussion_points TEXT[] DEFAULT '{}',\n    decisions_made TEXT[] DEFAULT '{}',\n    action_items TEXT[] DEFAULT '{}',\n    next_steps TEXT[] DEFAULT '{}',\n    follow_up_date DATE,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create indexes\nCREATE INDEX IF NOT EXISTS idx_meeting_notes_meeting_id ON meeting_notes(meeting_id);\nCREATE UNIQUE INDEX IF NOT EXISTS idx_meeting_notes_unique_meeting ON meeting_notes(meeting_id);\n\n-- Enable RLS\nALTER TABLE meeting_notes ENABLE ROW LEVEL SECURITY;"})]}),(0,n.jsxs)("div",{className:"bg-gray-50 border border-gray-200 rounded-lg p-4",children:[(0,n.jsx)("h3",{className:"text-lg font-semibold text-gray-900 mb-2",children:"Todo Items SQL Commands (Simplified)"}),(0,n.jsx)("pre",{className:"text-xs bg-white p-3 rounded border overflow-x-auto",children:"-- Create todo_items table (simplified: title, description, due_date only)\nCREATE TABLE IF NOT EXISTS todo_items (\n    id SERIAL PRIMARY KEY,\n    project_id INTEGER NOT NULL REFERENCES projects_project(id) ON DELETE CASCADE,\n    title TEXT NOT NULL,\n    description TEXT,\n    completed BOOLEAN DEFAULT FALSE,\n    due_date DATE,\n    created_by INTEGER NOT NULL,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create indexes\nCREATE INDEX IF NOT EXISTS idx_todo_items_project_id ON todo_items(project_id);\nCREATE INDEX IF NOT EXISTS idx_todo_items_created_by ON todo_items(created_by);\nCREATE INDEX IF NOT EXISTS idx_todo_items_due_date ON todo_items(due_date);\nCREATE INDEX IF NOT EXISTS idx_todo_items_completed ON todo_items(completed);\n\n-- Enable RLS\nALTER TABLE todo_items ENABLE ROW LEVEL SECURITY;"})]})]})})]})})})}},622:function(e,t,s){"use strict";var n=s(2265),a=Symbol.for("react.element"),i=Symbol.for("react.fragment"),r=Object.prototype.hasOwnProperty,d=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,o={key:!0,ref:!0,__self:!0,__source:!0};function l(e,t,s){var n,i={},l=null,c=null;for(n in void 0!==s&&(l=""+s),void 0!==t.key&&(l=""+t.key),void 0!==t.ref&&(c=t.ref),t)r.call(t,n)&&!o.hasOwnProperty(n)&&(i[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps)void 0===i[n]&&(i[n]=t[n]);return{$$typeof:a,type:e,key:l,ref:c,props:i,_owner:d.current}}t.Fragment=i,t.jsx=l,t.jsxs=l},7437:function(e,t,s){"use strict";e.exports=s(622)}},function(e){e.O(0,[7708,8411,2971,2472,1744],function(){return e(e.s=565)}),_N_E=e.O()}]);