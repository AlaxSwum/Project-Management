"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4273],{4273:function(t,e,i){i.d(e,{notificationService:function(){return a}});class s{async initSupabase(){if(!this.supabase){let{supabase:t}=await Promise.resolve().then(i.bind(i,8411));this.supabase=t}}async sendNotification(t){await this.initSupabase();try{let{data:e,error:i}=await this.supabase.from("notifications").insert([{recipient_id:t.recipient_id,sender_id:t.sender_id,type:t.type,title:t.title,message:t.message,data:t.data||{},is_read:!1,created_at:new Date().toISOString(),updated_at:new Date().toISOString()}]).select();if(i)return console.error("Error sending notification:",i),{success:!1,error:i};return{success:!0,data:e}}catch(t){return console.error("Error in sendNotification:",t),{success:!1,error:t}}}async sendTaskAssignmentNotification(t,e,i,s){return await this.sendNotification({recipient_id:e,sender_id:i,type:"task_assignment",title:"New Task Assigned",message:"You have been assigned to task: ".concat(s),data:{task_id:t,task_title:s}})}async sendTaskUpdateNotification(t,e,i,s,a){return await this.sendNotification({recipient_id:e,sender_id:i,type:"task_update",title:"Task Updated",message:'Task "'.concat(s,'" has been ').concat(a),data:{task_id:t,task_title:s,update_type:a}})}async sendProjectInviteNotification(t,e,i,s){return await this.sendNotification({recipient_id:e,sender_id:i,type:"project_invite",title:"Project Invitation",message:"You have been invited to join project: ".concat(s),data:{project_id:t,project_name:s}})}async markAsRead(t){await this.initSupabase();try{let{error:e}=await this.supabase.from("notifications").update({is_read:!0,updated_at:new Date().toISOString()}).eq("id",t);if(e)return console.error("Error marking notification as read:",e),{success:!1,error:e};return{success:!0}}catch(t){return console.error("Error in markAsRead:",t),{success:!1,error:t}}}async getNotifications(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:50;await this.initSupabase();try{let{data:i,error:s}=await this.supabase.from("notifications").select("*").eq("recipient_id",t).order("created_at",{ascending:!1}).limit(e);if(s)return console.error("Error fetching notifications:",s),{success:!1,error:s};return{success:!0,data:i}}catch(t){return console.error("Error in getNotifications:",t),{success:!1,error:t}}}constructor(){this.initSupabase()}}let a=new s}}]);