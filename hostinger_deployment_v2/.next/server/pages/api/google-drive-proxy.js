"use strict";(()=>{var e={};e.id=3005,e.ids=[3005],e.modules={145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},2781:e=>{e.exports=require("stream")},6249:(e,r)=>{Object.defineProperty(r,"l",{enumerable:!0,get:function(){return function e(r,o){return o in r?r[o]:"then"in r&&"function"==typeof r.then?r.then(r=>e(r,o)):"function"==typeof r&&"default"===o?r:void 0}}})},3278:(e,r,o)=>{o.r(r),o.d(r,{config:()=>E,default:()=>y,routeModule:()=>G});var t={};o.r(t),o.d(t,{config:()=>l,default:()=>c});var s=o(1802),a=o(7153),n=o(6249);let i=require("googleapis"),l={api:{bodyParser:{sizeLimit:"100mb"}}},d=new i.google.auth.GoogleAuth({credentials:{type:"service_account",project_id:"projectmanagement-463423",private_key_id:"2e9d0fa21fdbccbbf898c71b84dcdd1cdd36cc41",private_key:"-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCNVwL5DsRCIzF9\nvCbRlN+On1+D4T9F91mf9gB854anNLOjA9lxaPHI0gaOt4bRFyW7ZgzhcCB2WR/z\n/iSR71eJDtIPRMWajEwBpjj746pxjrMSU50orBC8RSFlkXTfqE/NgvxntrXy3u1r\niIUDj/1pdiESKkFvLcXxupmUKn2cVN+kgOE5XYqRyvsL1pH6yId4VTaJO8lpjPRw\ncJO6HqjvlblUUre90kdcpNQYFdVhyO9ofosgpZoaCn9IOtloqFdxxkyKz4JoMy8h\nV4CTskH/3eSzDZgSrGsQQI7JkYbCmtD2GxqHmRjtc1XALiqWRZzaJHNvK2Tgh0Ir\nSWetVgTLAgMBAAECggEAH00v2VyN1l/Y7BGpPy0LPZjKHHjb/HDFJonincbgqVMg\nnW+Szm0BbwokbaLzdob70j7Nh3e/mLYwP2b/TlqFNlNT7hG6+XkstAjOAervqmqB\n+gMOgR1qL2fX95h5G7c4xTjHEWkDbqA0UGZRnvJamuqQdGdrSmYGunwq2wd1/hLx\nikOQ8lfXXdtXX28EHP9z342oj3Cge2TjouVukaf7pkscT9a5JCPekb8flgWTe5WV\n2zGxCCpMxLC4IEPRkZwTHGkywgqtkdEX0YyjXJOuC8nt67KGVaPeixyH8V/j/3GI\n11K54K77/AzCzW6f00+ioTF80VJ/AhdQQLj53pjdwQKBgQDF/fSFaTSZOAw4a0ff\nypsJ6To9MMHIXK065QR1FuRdMlad97qd/TBeLBjy5/Rk/bkbpcK3ptuwR/FOUJfh\n/wZ/mHvcZ6nuVVOAQGqOiRqYHe1azgU9VET8cY8lfLD9Ny6AsdJCp8eaQVxlFWMM\nDISDks8wvv28Efp0TJq/u63tOwKBgQC2v/aE106feslbUxV1nlpqxjcWUsayNRmY\nUXHO//WXA5Lyq+CBagvwW4Sx7tBP85UKUcBxexIJcjDz/hfW9/Fp61jGXa4av/Z6\nYEzYetvFaE6yONda6tAzDmTg43l4lqYyaGpDlUyz/eHVklJhtI3O3cjKRqTRHgWV\niHIBcosNsQKBgFBg7xoSQeZKGLv24bD64cI+SwR4fNNIvJMCUrLuXjtvqjZrUfm9\nxhsVL/O9MzykvLd6rfg850dDjbVLhr2a+Rpn3zD1bMlzHnkcraW8B23mCGwq43mo\ncnFB8Ok5G+lQs7JPfprM3n3DNy1aZ2GG221G9pJFl2D4s4LvbouUN+HtAoGAAZQK\n1v7dCPeQgZ9oEgn6Ee4AT8sLOELJI82gQ/9l6ZX4UOw3FicKT1sa/EZpuicKZHps\nRQ6hCz/XOGQ7ZHnjtdx4ec4ZUNXTlR77yurUtxG9jEB9a6WXgrlfGaodRHNYoBrS\nwB6r+On6Z1PKLlnW17CGqWiOx9eQiMgS4/xPQyECgYBsfZIjrJsi7dM8xB+tTBHN\nUu7mLzSDoG9QZJDeBHqi+6Bd1R0Pwjranyau1/yrOyZ4cDcsriEr6P4H8IHyGPun\nz/VShJuu8jY0ndPgwn4gwRTwjUVbt6biWsQkoBj+qDzuwo8Ha6rxKds6DSspIt+r\nqbbLIT98XGf2E+hII8aLGQ==\n-----END PRIVATE KEY-----\n",client_email:"projectmanagement@projectmanagement-463423.iam.gserviceaccount.com",client_id:"107482587586285536651",auth_uri:"https://accounts.google.com/o/oauth2/auth",token_uri:"https://oauth2.googleapis.com/token",auth_provider_x509_cert_url:"https://www.googleapis.com/oauth2/v1/certs",client_x509_cert_url:"https://www.googleapis.com/robot/v1/metadata/x509/projectmanagement%40projectmanagement-463423.iam.gserviceaccount.com",universe_domain:"googleapis.com"},scopes:["https://www.googleapis.com/auth/drive"]}),u=i.google.drive({version:"v3",auth:d});async function c(e,r){if("POST"!==e.method)return r.status(405).json({error:"Method not allowed"});try{let{action:o,folderId:t,query:s,name:a,parentId:n}=e.body;switch(o){case"listFiles":return D(e,r,t);case"searchFiles":return g(e,r,s);case"createFolder":return f(e,r,a,n);case"uploadFile":return v(e,r);case"getAccessToken":return p(e,r);case"testAuth":return m(e,r);case"listSharedDrives":return h(e,r);default:return r.status(400).json({error:"Invalid action"})}}catch(e){return console.error("Google Drive proxy error:",e),r.status(500).json({error:"Internal server error"})}}async function D(e,r,o){try{let e;console.log("\uD83D\uDD0D DEBUG: Attempting to list files for folder:",o||"root");let t={fields:"nextPageToken, files(id, name, mimeType, modifiedTime, size, webViewLink, parents, shared, ownedByMe, driveId)",orderBy:"folder,name"};if(o&&"root"!==o){e=`'${o}' in parents and trashed=false`;try{let e=await u.files.get({fileId:o,fields:"driveId",supportsAllDrives:!0});e.data.driveId&&(console.log("\uD83D\uDD0D DEBUG: Listing files in shared drive:",e.data.driveId),t.includeItemsFromAllDrives=!0,t.supportsAllDrives=!0)}catch(e){console.log("\uD83D\uDD0D DEBUG: Folder not in shared drive or not accessible")}}else e="trashed=false and (sharedWithMe=true or 'root' in parents)",console.log("\uD83D\uDD0D DEBUG: Using root query to include shared folders and drives"),t.includeItemsFromAllDrives=!0,t.supportsAllDrives=!0;t.q=e,console.log("\uD83D\uDD0D DEBUG: Using query:",e),console.log("\uD83D\uDD0D DEBUG: List options:",t);let s=await u.files.list(t),a=s.data.files||[];return console.log("\uD83D\uDD0D DEBUG: Found",a.length,"files"),console.log("\uD83D\uDD0D DEBUG: Files:",a.map(e=>({name:e.name,type:e.mimeType,shared:e.shared,ownedByMe:e.ownedByMe,driveId:e.driveId}))),r.status(200).json({files:a})}catch(o){console.error("❌ ERROR listing files:",o);let e=o instanceof Error?o.message:String(o);return console.error("❌ ERROR details:",e),r.status(500).json({error:"Failed to list files",details:e,debug:!0})}}async function g(e,r,o){try{let e=await u.files.list({q:`name contains '${o}' and trashed=false`,fields:"nextPageToken, files(id, name, mimeType, modifiedTime, size, webViewLink, parents)",orderBy:"folder,name"}),t=e.data.files||[];return r.status(200).json({files:t})}catch(e){return console.error("Error searching files:",e),r.status(500).json({error:"Failed to search files"})}}async function f(e,r,o,t){try{let e={name:o,mimeType:"application/vnd.google-apps.folder"},s={requestBody:e,fields:"id, name, mimeType, modifiedTime, webViewLink, parents, driveId"};if(t&&"root"!==t){e.parents=[t];try{let e=await u.files.get({fileId:t,fields:"driveId",supportsAllDrives:!0});e.data.driveId&&(console.log("\uD83D\uDD0D DEBUG: Creating folder in shared drive:",e.data.driveId),s.supportsAllDrives=!0)}catch(e){console.log("\uD83D\uDD0D DEBUG: Parent not in shared drive or not accessible")}}let a=await u.files.create(s);return r.status(200).json(a.data)}catch(e){if(console.error("Error creating folder:",e),e&&"object"==typeof e&&"response"in e&&e.response?.status===403&&e.response?.data?.error?.errors?.some(e=>"storageQuotaExceeded"===e.reason||"quotaExceeded"===e.reason))return r.status(403).json({error:"Service Account Storage Limitation",details:"Service accounts cannot create folders in regular Google Drive. Please use Google Shared Drives instead.",solution:"Convert your Google Drive folders to Shared Drives (Team Drives) to enable folder creation.",documentation:"https://developers.google.com/workspace/drive/api/guides/about-shareddrives"});return r.status(500).json({error:"Failed to create folder"})}}async function p(e,r){return r.status(200).json({access_token:"service_account_authenticated",expires_in:3600,token_type:"Bearer"})}async function m(e,r){try{console.log("\uD83D\uDD0D DEBUG: Testing service account authentication...");let e=await u.about.get({fields:"user"});console.log("\uD83D\uDD0D DEBUG: Service account user:",e.data.user);let o=await u.files.list({q:"trashed=false",fields:"files(id, name, mimeType, parents, shared, ownedByMe)",pageSize:10});return console.log("\uD83D\uDD0D DEBUG: Found",o.data.files?.length,"total files"),console.log("\uD83D\uDD0D DEBUG: Files:",o.data.files?.map(e=>({name:e.name,type:e.mimeType,shared:e.shared,ownedByMe:e.ownedByMe}))),r.status(200).json({success:!0,serviceAccount:e.data.user,totalFiles:o.data.files?.length||0,files:o.data.files?.slice(0,5)})}catch(e){return console.error("❌ ERROR testing auth:",e),r.status(500).json({error:"Auth test failed",details:e instanceof Error?e.message:String(e)})}}async function v(e,r){try{let{fileName:t,fileData:s,mimeType:a,parentId:n}=e.body;if(!t||!s)return r.status(400).json({error:"File name and data are required"});console.log("\uD83D\uDD0D DEBUG: Upload file request:",{fileName:t,mimeType:a,parentId:n,dataSize:s.length});let i={name:t};n&&"root"!==n&&(i.parents=[n]);let l=Buffer.from(s,"base64");console.log("\uD83D\uDD0D DEBUG: File buffer size:",l.length);let d=o(2781),c=new d.PassThrough;if(c.end(l),console.log("\uD83D\uDD0D DEBUG: About to upload to Google Drive..."),n&&"root"!==n)try{let e=await u.files.get({fileId:n,fields:"id, name, mimeType, parents, driveId"});console.log("\uD83D\uDD0D DEBUG: Parent folder info:",e.data),e.data.driveId&&(console.log("\uD83D\uDD0D DEBUG: Uploading to shared drive:",e.data.driveId),i.driveId=e.data.driveId)}catch(e){return console.error("❌ ERROR: Parent folder not accessible:",e),r.status(400).json({error:"Parent folder not found or not accessible",details:"Please make sure the folder is shared with the service account",parentId:n})}let D=new Promise((e,r)=>{setTimeout(()=>r(Error("Upload timeout after 30 seconds")),3e4)}),g={requestBody:i,media:{mimeType:a||"application/octet-stream",body:c},fields:"id, name, mimeType, modifiedTime, size, webViewLink, parents"};i.driveId&&(g.supportsAllDrives=!0);let f=u.files.create(g),p=await Promise.race([f,D]);return console.log("✅ File uploaded successfully:",p.data),r.status(200).json(p.data)}catch(o){if(console.error("❌ ERROR uploading file:",o),o instanceof Error&&(console.error("❌ Error name:",o.name),console.error("❌ Error message:",o.message),console.error("❌ Error stack:",o.stack)),o&&"object"==typeof o&&"response"in o&&(console.error("❌ Google API Error:",o.response?.data),console.error("❌ Google API Status:",o.response?.status),console.error("❌ Google API Headers:",o.response?.headers),o.response?.status===403&&o.response?.data?.error?.errors?.some(e=>"storageQuotaExceeded"===e.reason||"quotaExceeded"===e.reason)))return r.status(403).json({error:"Service Account Storage Limitation",details:"Service accounts cannot upload to regular Google Drive folders. Please use Google Shared Drives instead.",solution:"Convert your Google Drive folders to Shared Drives (Team Drives) to enable uploads.",documentation:"https://developers.google.com/workspace/drive/api/guides/about-shareddrives"});return r.status(500).json({error:"Failed to upload file",details:o instanceof Error?o.message:String(o),debug:{fileName:e.body.fileName,mimeType:e.body.mimeType,parentId:e.body.parentId,bufferSize:e.body.fileData?Buffer.from(e.body.fileData,"base64").length:0}})}}async function h(e,r){try{console.log("\uD83D\uDD0D DEBUG: Listing shared drives...");let e=await u.drives.list({fields:"nextPageToken, drives(id, name, createdTime, capabilities)"}),o=e.data.drives||[];return console.log("\uD83D\uDD0D DEBUG: Found",o.length,"shared drives"),console.log("\uD83D\uDD0D DEBUG: Shared drives:",o.map(e=>({name:e.name,id:e.id}))),r.status(200).json({drives:o})}catch(o){console.error("❌ ERROR listing shared drives:",o);let e=o instanceof Error?o.message:String(o);return console.error("❌ ERROR details:",e),r.status(500).json({error:"Failed to list shared drives",details:e,debug:!0})}}let y=(0,n.l)(t,"default"),E=(0,n.l)(t,"config"),G=new s.PagesAPIRouteModule({definition:{kind:a.x.PAGES_API,page:"/api/google-drive-proxy",pathname:"/api/google-drive-proxy",bundlePath:"",filename:""},userland:t})},7153:(e,r)=>{var o;Object.defineProperty(r,"x",{enumerable:!0,get:function(){return o}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(o||(o={}))},1802:(e,r,o)=>{e.exports=o(145)}};var r=require("../../webpack-api-runtime.js");r.C(e);var o=r(r.s=3278);module.exports=o})();